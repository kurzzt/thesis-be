// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Province {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  kodeBps   String    @unique
  name      String
  latitude  Float
  longitude Float
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  Regency   Regency[]
}

model Regency {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  kodeBps   String     @unique
  name      String
  latitude  Float
  longitude Float
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?
  parent    Province?  @relation(fields: [parentId], references: [kodeBps])
  parentId  String
  District  District[]
}

model District {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  kodeBps   String    @unique
  name      String
  latitude  Float
  longitude Float
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  parent    Regency?  @relation(fields: [parentId], references: [kodeBps])
  parentId  String
  Village   Village[]
}

model Village {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  kodeBps   String    @unique
  name      String
  latitude  Float
  longitude Float
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  parent    District? @relation(fields: [parentId], references: [kodeBps])
  parentId  String
}

model Role {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  User      User[]
}

model User {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  email           String
  password        String
  role            Role?             @relation(fields: [roleId], references: [id])
  roleId          String            @db.ObjectId
  accessToken     String?
  refreshToken    String?
  status          Status            @default(ACTIVE)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deletedAt       DateTime?
  lastAccessedAt  DateTime?
  placeReview     PlaceReview[]
  PlacePhoto      PlacePhoto[]
  KycRespondent   KycRespondent[]
  SavedPlace      SavedPlace[]
  PlaceSuggestion PlaceSuggestion[]
}

model SavedPlace {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  place     Place?   @relation(fields: [placeId], references: [id])
  placeId   String   @db.ObjectId
}

model SearchHistory {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  keyword   String
  createdAt DateTime @default(now())
}

model PlaceSuggestion {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  suggest   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  user      User?     @relation(fields: [userId], references: [id])
  userId    String    @db.ObjectId
}

enum Status {
  ACTIVE
  INACTIVE
}

model KycCategory {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  status      Status        @default(ACTIVE)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  deletedAt   DateTime?
  KycQuestion KycQuestion[]
}

model KycQuestion {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  text          String
  status        Status          @default(ACTIVE)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  deletedAt     DateTime?
  category      KycCategory?    @relation(fields: [categoryId], references: [id])
  categoryId    String          @db.ObjectId
  KycRespondent KycRespondent[]
}

model KycRespondent {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  deletedAt  DateTime?
  question   KycQuestion? @relation(fields: [questionId], references: [id])
  questionId String       @db.ObjectId
  user       User?        @relation(fields: [userId], references: [id])
  userId     String       @db.ObjectId

  @@unique([userId, questionId])
}

model PlaceReview {
  id                             String             @id @default(auto()) @map("_id") @db.ObjectId
  reviewApi                      String?
  relativePublishTimeDescription String?
  text                           String
  rating                         Float
  authorAttribution              AuthorAttribution?
  provider                       Provider
  createdAt                      DateTime           @default(now())
  updatedAt                      DateTime           @updatedAt
  deletedAt                      DateTime?
  user                           User?              @relation(fields: [userId], references: [id])
  userId                         String?            @db.ObjectId
  place                          Place?             @relation(fields: [placeId], references: [placeAPI])
  placeId                        String
}

model PlacePhoto {
  id                 String              @id @default(auto()) @map("_id") @db.ObjectId
  photoApi           String?
  imageUrl           String?
  provider           Provider
  widthPx            Int?
  heightPx           Int?
  authorAttributions AuthorAttribution[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  deletedAt          DateTime?
  user               User?               @relation(fields: [userId], references: [id])
  userId             String?             @db.ObjectId
  place              Place?              @relation(fields: [placeId], references: [placeAPI])
  placeId            String
}

model Place {
  id                           String                @id @default(auto()) @map("_id") @db.ObjectId
  placeAPI                     String?               @unique
  displayName                  String?               @default("")
  types                        String[]
  primaryType                  String?               @default("")
  internationalPhoneNumber     String?               @default("")
  addressComponents            AddressComponent[]
  plusCode                     PlusCode?
  location                     LatLng?
  rating                       Float?
  googleMapsUri                String?
  websiteUri                   String?
  reviews                      PlaceReview[]
  regularOpeningHours          OpeningHour?
  photos                       PlacePhoto[]
  businessStatus               BussinessStatus?
  priceLevel                   PriceLevel?
  iconMaskBaseUri              String?
  iconBackgroundColor          String?
  currentOpeningHours          OpeningHour?
  currentSecondaryOpeningHours OpeningHour[]
  regularSecondaryOpeningHours OpeningHour[]
  editorialSummary             String?
  paymentOptions               PaymentOptions?
  parkingOptions               ParkingOptions?
  utcOffsetMinutes             Int?
  userRatingCount              Int?
  takeout                      Boolean               @default(false)
  delivery                     Boolean               @default(false)
  dineIn                       Boolean               @default(false)
  curbsidePickup               Boolean               @default(false)
  reservable                   Boolean               @default(false)
  servesBreakfast              Boolean               @default(false)
  servesLunch                  Boolean               @default(false)
  servesDinner                 Boolean               @default(false)
  servesBeer                   Boolean               @default(false)
  servesWine                   Boolean               @default(false)
  servesBrunch                 Boolean               @default(false)
  servesVegetarianFood         Boolean               @default(false)
  outdoorSeating               Boolean               @default(false)
  liveMusic                    Boolean               @default(false)
  menuForChildren              Boolean               @default(false)
  servesCocktails              Boolean               @default(false)
  servesDessert                Boolean               @default(false)
  servesCoffee                 Boolean               @default(false)
  goodForChildren              Boolean               @default(false)
  allowsDogs                   Boolean               @default(false)
  restroom                     Boolean               @default(false)
  goodForGroups                Boolean               @default(false)
  goodForWatchingSports        Boolean               @default(false)
  accessibilityOptions         AccessibilityOptions?
  createdAt                    DateTime              @default(now())
  updatedAt                    DateTime              @updatedAt
  deletedAt                    DateTime?
  SavedPlace                   SavedPlace[]
}

type AddressComponent {
  longText     String
  shortText    String
  types        String[]
  languageCode String?
}

type PlusCode {
  globalCode   String?
  compoundCode String?
}

type LatLng {
  longitude Float?
  latitude  Float?
}

type ViewPort {
  low  LatLng
  high LatLng
}

type OpeningHour {
  openNow            Boolean?
  periods            Periode[]
  secondaryHoursType SecondaryHoursType?
  specialDays        SpecialDay[]
}

type Attribution {
  provider    String
  providerUri String
}

type PaymentOptions {
  acceptsCreditCards Boolean @default(false)
  acceptsDebitCards  Boolean @default(false)
  acceptsCashOnly    Boolean @default(false)
  acceptsNfc         Boolean @default(false)
}

type AccessibilityOptions {
  wheelchairAccessibleParking  Boolean @default(false)
  wheelchairAccessibleEntrance Boolean @default(false)
  wheelchairAccessibleRestroom Boolean @default(false)
  wheelchairAccessibleSeating  Boolean @default(false)
}

type ParkingOptions {
  freeParkingLot    Boolean @default(false)
  paidParkingLot    Boolean @default(false)
  freeStreetParking Boolean @default(false)
  paidStreetParking Boolean @default(false)
  valetParking      Boolean @default(false)
  freeGarageParking Boolean @default(false)
  paidGarageParking Boolean @default(false)
}

type SubDestination {
  name String
  id   String
}

type AuthorAttribution {
  displayName String
  uri         String
  photoUri    String
}

type Periode {
  open  Point
  close Point?
}

type Point {
  truncated Boolean?
  day       Int
  hour      Int
  minute    Int
  date      DateInfo?
}

type DateInfo {
  year  Int
  month Int
  day   Int
}

type SpecialDay {
  date DateInfo
}

enum BussinessStatus {
  BUSINESS_STATUS_UNSPECIFIED
  OPERATIONAL
  CLOSED_TEMPORARILY
  CLOSED_PERMANENTLY
}

enum PriceLevel {
  PRICE_LEVEL_INEXPENSIVE
  PRICE_LEVEL_MODERATE
  PRICE_LEVEL_EXPENSIVE
  PRICE_LEVEL_VERY_EXPENSIVE
}

enum SecondaryHoursType {
  SECONDARY_HOURS_TYPE_UNSPECIFIED
  DRIVE_THROUGH
  HAPPY_HOUR
  DELIVERY
  TAKEOUT
  KITCHEN
  BREAKFAST
  LUNCH
  DINNER
  BRUNCH
  PICKUP
  ACCESS
  SENIOR_HOURS
  ONLINE_SERVICE_HOURS
}

enum Provider {
  GOOGLE
  USER
}
